name: CI

on:
    pull_request:
        branches:
            - main
            - develop
            - uat
            - sit

    workflow_dispatch:
      inputs:
        selected_commit:
          description: 'Select commit(s) to merge (Enter commit hash or "all" for all commits)'
          required: false
concurrency:
    group: ci-on-branch-${{ github.head_ref }}
    cancel-in-progress: true

jobs:
  Select-Commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Display commit list
        run: git log --pretty=format:"%h - %an, %ar :%s" -100
        id: commit-list

      - name: Set commit selection
        id: commit-selector
        run: |
          echo "::set-output name=selected_commit::$(echo '${{ steps.commit-list.outputs.stdout }}' | fzf | awk '{print $1}')"
        shell: bash
        env:
          FZF_DEFAULT_OPTS: '--ansi'

  Merge-Commits:
    runs-on: ubuntu-latest
    needs: Select-Commits
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Merge selected commit to current branch
        run: |
          git fetch origin develop uat sit main
          git checkout ${{ github.event.pull_request.base.ref }}
          
          if [[ "${{ needs.Select-Commits.outputs.selected_commit }}" == "all" ]]; then
            git merge --no-ff ${{ github.event.pull_request.head.ref }}
          else
            IFS=',' read -ra commits <<< "${{ needs.Select-Commits.outputs.selected_commit }}"
            for commit in "${commits[@]}"; do
              git merge --no-ff $commit
            done
          fi
          
          git push origin ${{ github.event.pull_request.base.ref }}
        shell: bash
    #########################
    # Read envs from dotenv #
    #########################
setup-env-vars:
        runs-on: ubuntu-latest
        outputs:
            DEPLOY_ENV: ${{ steps.setenv.outputs.DEP_ENV }}
            ENVIRONMENT_PREFIX: ${{ steps.dotenv.outputs.ENVIRONMENT_PREFIX }}
            ADF_RG: ${{ steps.dotenv.outputs.ADF_RG }}
            ADF_NAME: ${{ steps.dotenv.outputs.ADF_NAME }}
            SUBSCRIPTION_ID: ${{ steps.dotenv.outputs.SUBSCRIPTION_ID }}
            AZURE_CREDENTIALS: AZURE_CREDENTIALS_${{ steps.setenv.outputs.DEP_ENV }}
        steps:
            - uses: actions/checkout@v2
            - name: Set Deploy env based on branch
              id: setenv
              run: |
                  branch=${GITHUB_BASE_REF##*/}
                  if [[ "$branch" == "develop" ]]
                  then
                      env="DEV"
                  elif [[ "$branch" == "sit" ]]
                  then
                      env="SIT"
                  elif [[ "$branch" == "uat" ]]
                  then
                      env="UAT"        
                  elif [[ "$branch" == "main" ]]
                  then
                      env="PROD"
                  else
                      env="DEV"
                  fi
                  echo ::set-output name=DEP_ENV::${env}
                  echo ::set-output name=ENVIRONMENT_PREFIX::${env,,}

            - name: Read Custom Environment variables
              id: dotenv
              uses: falti/dotenv-action@v0.2.7
              with:
                  path: envs/${{ steps.setenv.outputs.DEP_ENV }}.env

    #########################################
    # Filter path to run only relevant jobs #
    #########################################
paths-filter:
        runs-on: ubuntu-latest
        needs: setup-env-vars
        outputs:
            adf: ${{ steps.filter.outputs.adf }}
            sql: ${{ steps.filter.outputs.sql }}
        steps:
            - uses: actions/checkout@v2
            - uses: dorny/paths-filter@v2
              id: filter
              with:
                  list-files: none
                  filters: |
                      adf:
                        - 'adf/**'
                        - 'envs/**'
                        - '.github/**'
                      sql:
                        - 'sql/**'
                        - 'envs/**'
                        - '.github/**'

    ######################
    # SQL DACPAC CI Job  #
    ######################
    SQL:
        runs-on: windows-latest
        if: ${{ needs.paths-filter.outputs.sql == 'true' && github.event_name == 'pull_request' && github.event.pull_request.merged == false }}
        needs:
            - paths-filter
            - setup-env-vars
        env:
            ARTIFACTS_PATH: ${{ github.workspace }}/build
            PROFILE_PATH: sql/profiles
            ENVIRONMENT_PREFIX: ${{ needs.setup-env-vars.outputs.ENVIRONMENT_PREFIX }}
            STORAGE_ACCOUNT: ${{ needs.setup-env-vars.outputs.STORAGE_ACCOUNT }}
            SA_RG: ${{ needs.setup-env-vars.outputs.SA_RG }}
            AZURE_CREDENTIALS: ${{ needs.setup-env-vars.outputs.AZURE_CREDENTIALS }} 
        steps:
            - uses: actions/checkout@v2

            - id: dotnet-build
              name: Building DACPAC
              uses: ./.github/actions/dotnet-data-build
              with:
                  configuration: "Release"
                  solution: sql/**/*.csproj
                  outputpath: ${ARTIFACTS_PATH}

            - id: sql-login
              name: Acquiring SQL Access Token
              uses: ./.github/actions/azure-resource-login
              with:
                  creds: ${{ secrets[env.AZURE_CREDENTIALS] }}
                  resource-url: "https://database.windows.net"
      

            - id: deploy-report
              name: Identifying proposed changes
              uses: ./.github/actions/run-sqlpackage
              with:
                  action: "DeployReport"
                  sourcepath: ${{ steps.dotnet-build.outputs.dacpath }}
                  outputpath: ${{ steps.dotnet-build.outputs.dacpath }}
                  outputfile: "deployreport.xml"
                  profile: ${{ github.workspace }}/${PROFILE_PATH}/${ENVIRONMENT_PREFIX}.profile.xml
                  authtoken: ${{ steps.sql-login.outputs.token }}

            - id: validate-deploy
              name: Validating proposed changes
              uses: ./.github/actions/validate-sqlpackage
              with:
                  environment: ${{ env.ENVIRONMENT_PREFIX }}
                  sqlpackage-report: ${{ env.ARTIFACTS_PATH }}/*.xml
                  outputpath: ${{ env.ARTIFACTS_PATH }}
                  outputfile: "deployreport.MD"
                  haltonerrors: true


            - name: Publishing artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: sql-build
                  path: ${{ env.ARTIFACTS_PATH }}/*
                  if-no-files-found: error


    ######################
    #     ADF CI Job     #
    ######################
    ADF:
        defaults:
            run:
              working-directory: adf
        runs-on: ubuntu-latest
        needs:
            - paths-filter
            - setup-env-vars
        env:
            ARTIFACTS_PATH: adf
            RESOURCE_GROUP_NAME: ${{ needs.setup-env-vars.outputs.ADF_RG }}
            FACTORY_NAME: ${{ needs.setup-env-vars.outputs.ADF_NAME }}
            SUBSCRIPTION_ID: ${{ needs.setup-env-vars.outputs.SUBSCRIPTION_ID }}

        if: ${{ needs.paths-filter.outputs.adf == 'true' }}
        steps:
            - uses: actions/checkout@v2

            - name: Setup Node.js environment
              uses: actions/setup-node@v2

            - name: Install ADF package
              run: npm install

            - name: Validate
              run: npm run build validate ${GITHUB_WORKSPACE}/adf /subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.DataFactory/factories/${FACTORY_NAME}

            - name: Export
              run: npm run build export ${GITHUB_WORKSPACE}/adf /subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.DataFactory/factories/${FACTORY_NAME} "ArmTemplate"
        
            - name: Upload ARM Template as Artifact
              uses: actions/upload-artifact@v2
              with:
                name: ArmTemplate
                path: ${{ env.ARTIFACTS_PATH }}/*
